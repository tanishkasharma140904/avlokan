import React, { useState, useEffect } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { v4 as uuidv4 } from "uuid";

const initialData = {
  "todo": { title: "To Do", tasks: [] },
  "inProgress": { title: "In Progress", tasks: [] },
  "done": { title: "Done", tasks: [] }
};

const getSavedTasks = () => {
  const savedData = localStorage.getItem("tasks");
  return savedData ? JSON.parse(savedData) : initialData;
};

const TaskManager = () => {
  const [columns, setColumns] = useState(getSavedTasks);
  const [taskTitle, setTaskTitle] = useState("");
  const [taskDesc, setTaskDesc] = useState("");

  useEffect(() => {
    localStorage.setItem("tasks", JSON.stringify(columns));
  }, [columns]);

  const addTask = () => {
    if (!taskTitle.trim()) return;
    const newTask = { id: uuidv4(), title: taskTitle, description: taskDesc };
    setColumns({
      ...columns,
      todo: { ...columns.todo, tasks: [...columns.todo.tasks, newTask] }
    });
    setTaskTitle("");
    setTaskDesc("");
  };

  const onDragEnd = (result) => {
    if (!result.destination) return;

    const { source, destination } = result;
    const sourceColumn = columns[source.droppableId];
    const destColumn = columns[destination.droppableId];
    const sourceTasks = [...sourceColumn.tasks];
    const destTasks = destination.droppableId === source.droppableId ? sourceTasks : [...destColumn.tasks];
    
    const [movedTask] = sourceTasks.splice(source.index, 1);
    destTasks.splice(destination.index, 0, movedTask);

    setColumns({
      ...columns,
      [source.droppableId]: { ...sourceColumn, tasks: sourceTasks },
      [destination.droppableId]: { ...destColumn, tasks: destTasks }
    });
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-4">Task Manager</h1>
      <div className="mb-4">
        <input
          className="border p-2 mr-2"
          placeholder="Task Title"
          value={taskTitle}
          onChange={(e) => setTaskTitle(e.target.value)}
        />
        <input
          className="border p-2 mr-2"
          placeholder="Task Description"
          value={taskDesc}
          onChange={(e) => setTaskDesc(e.target.value)}
        />
        <button className="bg-blue-500 text-white p-2" onClick={addTask}>Add Task</button>
      </div>
      
      <DragDropContext onDragEnd={onDragEnd}>
        <div className="grid grid-cols-3 gap-4">
          {Object.entries(columns).map(([id, column]) => (
            <Droppable key={id} droppableId={id}>
              {(provided) => (
                <div ref={provided.innerRef} {...provided.droppableProps} className="bg-gray-100 p-4 rounded-md min-h-[300px]">
                  <h2 className="font-bold mb-2">{column.title}</h2>
                  {column.tasks.map((task, index) => (
                    <Draggable key={task.id} draggableId={task.id} index={index}>
                      {(provided) => (
                        <div
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          className="bg-white p-2 rounded-md mb-2 shadow-md"
                        >
                          <h3 className="font-semibold">{task.title}</h3>
                          <p className="text-sm">{task.description}</p>
                        </div>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          ))}
        </div>
      </DragDropContext>
    </div>
  );
};

export default TaskManager;
